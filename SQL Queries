-- 1. Customer Analysis - Demographic Distribution
	
CREATE TABLE public.customer_demographics AS 
SELECT 
    "Gender",
    EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM "Birthday") AS age,
    "City",
    "State",
    "Country",
    "Continent",
    COUNT(*) AS num_customers
FROM 
    public."Customers"
GROUP BY 
    "Gender", 
    EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM "Birthday"),  -- Use the same expression as in SELECT
    "City", 
    "State", 
    "Country", 
    "Continent"
ORDER BY 
    num_customers DESC;

Query Description :

This script calculates the age of each customer by subtracting the birth year from the current year. The customers are then grouped by gender, age, and geographic details (city, state, country, continent). The num_customers column counts how many customers fall into each demographic group. Finally, the results are ordered by the number of customers in descending order, giving a clear view of the most common demographic segments.



-- 2. Purchase Patterns:

CREATE TABLE public.customer_purchase_patterns AS 
SELECT 
    s."CustomerKey",
    AVG(s."Quantity" * (p."Unit Price USD" - p."Unit Cost USD")) AS avg_order_value,  -- Assuming order value calculation
    COUNT(s."Order Number") AS purchase_frequency,
    STRING_AGG(p."Product Name", ', ') AS preferred_products
FROM 
    public."Sales" s
JOIN 
    public."Products" p ON s."ProductKey" = p."ProductKey"
GROUP BY 
    s."CustomerKey"
ORDER BY 
    avg_order_value DESC;

Query Description :

This script creates a new table named customer_purchase_patterns that analyzes customer purchase behavior. It calculates the average order value for each customer by taking the difference between the unit price and unit cost of products and multiplying by the quantity purchased. The script also counts the number of orders placed by each customer to determine their purchase frequency. Additionally, it aggregates the names of products that a customer frequently buys into a single string, listing them as preferred products. The results are grouped by CustomerKey and ordered by the average order value in descending order, highlighting the most valuable customers based on their purchase patterns.



-- 3. Customer Segmentation:

CREATE TABLE public.customer_segmentation AS
SELECT 
    CASE 
        WHEN EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM "Birthday") < 30 THEN 'Young'
        WHEN EXTRACT(YEAR FROM CURRENT_DATE) - EXTRACT(YEAR FROM "Birthday") BETWEEN 30 AND 50 THEN 'Middle-aged'
        ELSE 'Senior'
    END AS age_group,
    "Gender",
    COUNT(C."CustomerKey") AS num_customers,
    AVG(S."Quantity" * (P."Unit Price USD" - P."Unit Cost USD")) AS avg_order_value
FROM 
    public."Customers" C
JOIN 
    public."Sales" S ON C."CustomerKey" = S."CustomerKey"
JOIN 
    public."Products" P ON S."ProductKey" = P."ProductKey"
GROUP BY 
    age_group, "Gender"
ORDER BY 
    num_customers DESC;

Query Description :

This script creates a new table named customer_segmentation that categorizes customers into different segments based on age and gender. Customers are divided into three age groups: 'Young' (under 30 years old), 'Middle-aged' (30 to 50 years old), and 'Senior' (over 50 years old). The script counts the number of customers in each age and gender segment and calculates the average order value for each segment by taking the difference between the unit price and unit cost of products and multiplying it by the quantity purchased. The results are grouped by age group and gender, and ordered by the number of customers in descending order, helping to identify the most significant customer segments.



-- 4. Sales Analysis - Overall Sales Performance:

CREATE TABLE public.overall_sales_performance AS
SELECT 
    DATE_TRUNC('month', "Order Date") AS month,
    SUM("Quantity" * ("Unit Price USD" - "Unit Cost USD")) AS total_sales
FROM 
    public."Sales" S
JOIN 
    public."Products" P ON S."ProductKey" = P."ProductKey"
GROUP BY 
    month
ORDER BY 
    month;

Query Description :

This script creates a new table named overall_sales_performance that summarizes the overall sales performance on a monthly basis. The script calculates the total sales for each month by summing the product of the quantity sold and the profit margin (difference between unit price and unit cost) for each sale. The results are grouped by month, ensuring that sales data is aggregated for each month, and are ordered chronologically by month. This analysis provides a clear view of how sales have trended over time.



-- 5. Sales by Product:

CREATE TABLE public.sales_by_product AS
SELECT 
    P."Product Name",
    SUM(S."Quantity") AS total_quantity_sold,
    SUM(S."Quantity" * (P."Unit Price USD" - P."Unit Cost USD")) AS total_revenue
FROM 
    public."Sales" S
JOIN 
    public."Products" P ON S."ProductKey" = P."ProductKey"
GROUP BY 
    P."Product Name"
ORDER BY 
    total_revenue DESC;

Query Description :

This script creates a new table named sales_by_product that analyzes sales performance by individual products. The script calculates the total quantity of each product sold and the total revenue generated by each product, where revenue is computed as the product of the quantity sold and the profit margin (difference between unit price and unit cost). The results are grouped by product name and ordered by total revenue in descending order, highlighting the most profitable products. This analysis helps identify top-performing products in terms of both sales volume and revenue.



-- 6. Sales by Stores:

CREATE TABLE public.sales_by_stores AS
SELECT 
    S."StoreKey",
    SUM(S."Quantity" * (P."Unit Price USD" - P."Unit Cost USD")) AS total_sales
FROM 
    public."Sales" S
JOIN 
    public."Products" P ON S."ProductKey" = P."ProductKey"
GROUP BY 
    S."StoreKey"
ORDER BY 
    total_sales DESC;

Query Description :

This script creates a new table named sales_by_stores that evaluates sales performance across different stores. The script calculates the total sales for each store by summing the product of the quantity sold and the profit margin (difference between unit price and unit cost) for each sale. The results are grouped by StoreKey and ordered by total sales in descending order, allowing for a clear comparison of sales performance across stores. This analysis helps identify the most and least successful stores based on their total sales revenue.



-- 7. Sales by Currency:

CREATE TABLE public.sales_by_currency AS
SELECT 
    S."Currency Code" AS currency_code,
    SUM(S."Quantity" * (P."Unit Price USD" - P."Unit Cost USD") * C."Exchange") AS total_sales_in_usd
FROM 
    public."Sales" S
JOIN 
    public."Products" P ON S."ProductKey" = P."ProductKey"
JOIN 
    public."Exchange_Rates" C ON S."Currency Code" = C."Currency"
GROUP BY 
    S."Currency Code"
ORDER BY 
    total_sales_in_usd DESC;

Query Description :

This script creates a new table named sales_by_currency that analyzes sales performance by different currencies, converting the total sales into USD. The script calculates the total sales for each currency by summing the product of the quantity sold, the profit margin (difference between unit price and unit cost), and the exchange rate to USD for that currency. The results are grouped by currency code and ordered by total sales in USD in descending order, providing insight into how much revenue is generated in different currencies and which currencies contribute the most to overall sales.



-- 8. Product Analysis - Product Popularity:

CREATE TABLE public.product_popularity AS
SELECT 
    P."Product Name" AS product_name,
    SUM(S."Quantity") AS total_quantity_sold
FROM 
    public."Sales" S
JOIN 
    public."Products" P ON S."ProductKey" = P."ProductKey"
GROUP BY 
    P."Product Name"
ORDER BY 
    total_quantity_sold DESC;

Query Description :

This script creates a new table named product_popularity that assesses the popularity of products based on the total quantity sold. The script calculates the total number of units sold for each product by summing the quantities across all sales. The results are grouped by product name and ordered by total quantity sold in descending order, allowing for easy identification of the most popular products in terms of sales volume. This analysis helps determine which products are in highest demand.



-- 9. Profitability Analysis:

CREATE TABLE public.profitability_analysis AS
SELECT 
    P."Product Name" AS product_name,
    AVG(P."Unit Price USD" - P."Unit Cost USD") AS avg_profit_margin
FROM 
    public."Products" P
GROUP BY 
    P."Product Name"
ORDER BY 
    avg_profit_margin DESC;

Query Description :

This script creates a new table named profitability_analysis that evaluates the profitability of products by calculating the average profit margin for each one. The profit margin is determined by subtracting the unit cost from the unit price for each product. The script calculates the average profit margin across all sales of each product, groups the results by product name, and orders them by average profit margin in descending order. This analysis helps identify the most profitable products based on their average profit margins.



-- 10. Category Analysis:

CREATE TABLE public.category_analysis AS
SELECT 
    P."Category" AS category,
    SUM(S."Quantity" * P."Unit Price USD") AS total_revenue
FROM 
    public."Sales" S
JOIN 
    public."Products" P ON S."ProductKey" = P."ProductKey"
GROUP BY 
    P."Category"
ORDER BY 
    total_revenue DESC;

Query Description :

This script creates a new table named category_analysis that analyzes the revenue generated by different product categories. The script calculates the total revenue for each category by summing the product of the quantity sold and the unit price of the products within that category. The results are grouped by category and ordered by total revenue in descending order, providing insight into which categories are the most financially successful. This analysis helps identify the top-performing product categories based on total sales revenue.
